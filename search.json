[{"path":"http://kwstat.github.io/lucid/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 lucid authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://kwstat.github.io/lucid/articles/lucid_examples.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Lucid printing of floating-point vectors","text":"","code":"library(\"knitr\")     opts_chunk$set(fig.align=\"center\", fig.width=6, fig.height=6) options(width=90)"},{"path":"http://kwstat.github.io/lucid/articles/lucid_examples.html","id":"abstract","dir":"Articles","previous_headings":"","what":"Abstract","title":"Lucid printing of floating-point vectors","text":"Farquhar Farquhar (1891) provide humorous quote tables: graphic method considerable superiority exposition statistical facts tabular. heavy bank figures grievously wearisome eye, popular mind incapable drawing useful lessons extracting sunbeams cucumbers. lucid package intends make life easier helping extract information tables. package functions printing vectors tables floating-point numbers human-friendly format. application presented printing variance components mixed models.","code":""},{"path":"http://kwstat.github.io/lucid/articles/lucid_examples.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Lucid printing of floating-point vectors","text":"Numerical output R often scientific notation, can make difficult quickly glance numbers understand relative sizes numbers. new phenomenon. R created, Finney (1988) say numerical output: Certainly, initiating analyses standard software writing one’s software, aim output easy read easily intelligible others. … Especially undesirable -called ‘scientific notation’ numbers every number shown value 0.0 1.0 power 10 must multiplied. example: abomination obscures comparison related quantities; tables means analyses variance become difficult read. acceptable default value unexpectedly much larger smaller companions, appearance standard output denotes either lazy programming failure use good software properly. Like avoidance ‘E’, neat arrangement output values columns, decimal points vertical line, requires extra effort programmer almost mandatory software used often. One recommendation improving display tables numbers round numbers 2 (Wainer 1997) 3 Clark (1965) digits following reasons: comprehend three digits easily. seldom care accuracy three digits. can rarely justify three digits accuracy statistically. alternative significant digits concept effective digits Kozak et al. (2011), considers amount variation data. R, round() signif() functions can used round 3 digits accuracy, functions can still print results scientific notation leave much desired. lucid package provides functions improve presentation floating point numbers clear (lucid) way makes interpretation numbers immediately apparent. Consider following vector coefficients fitted model: Questions interest coefficients might include: coefficient zero? large intercept? questions can answered using output shown , takes much effort answer questions. Now examine vector coefficients prettier formatting: coefficient zero? large intercept? Printing numbers lucid() function made questions much easier answer. sequence steps used lucid() format print output . Zap small numbers zero using zapsmall(). Round using 3 significant digits (user controllable option). Drop trailing zeros. Align numbers decimal point (text format). lucid package contains generic function lucid() specific methods numeric vectors, data frames, lists. method data frames applies formatting numeric column leaves columns unchanged. lucid() function primarily formatting function, results passed regular print() functions.","code":"0.1234E00 is 0.1234 0.1234E02 is 12.34 0.1234E-1 is 0.01234 ##                    effect ## (Intercept)  1.135000e+02 ## A           -1.350000e+01 ## B            4.500000e+00 ## C            2.450000e+01 ## C1           6.927792e-14 ## C2          -1.750000e+00 ## D            1.650000e+01 require(\"lucid\") options(digits=7) # knitr defaults to 4, R console uses 7 lucid(df1) ##             effect ## (Intercept) 114    ## A           -13.5  ## B             4.5  ## C            24.5  ## C1            0    ## C2           -1.75 ## D            16.5"},{"path":"http://kwstat.github.io/lucid/articles/lucid_examples.html","id":"example-antibiotic-effectiveness","dir":"Articles","previous_headings":"","what":"Example: Antibiotic effectiveness","title":"Lucid printing of floating-point vectors","text":"Wainer Larsen (2009) present data published Burtin 1951 effectiveness antibiotics 16 types bacteria. data included lucid package dataframe called antibiotic. default view data : Due wide range magnitude values, nearly half floating-point numbers default view contain trailing zeros decimal, adds significant clutter impedes interpretation. lucid() display data : lucid() display dramatically simplified, providing clear picture effectiveness antibiotics bacteria. view data matches exactly appearance Table 1 Wainer Larsen (2009). stem--leaf plot semi-graphical display data, positions numbers create display similar histogram. similar manner, lucid() output semi-graphical view data. figure shows dotplot penicillin values reverse log10 scale. values also shown along right axis lucid() format. Note similarity overall shape dots positions left-significant digit numerical values along right axis.","code":"print(antibiotic) ##                      bacteria penicillin streptomycin neomycin gramstain ## 1        Aerobacter aerogenes    870.000         1.00    1.600       neg ## 2            Brucella abortus      1.000         2.00    0.020       neg ## 3            Escherichia coli    100.000         0.40    0.100       neg ## 4       Klebsiella pneumoniae    850.000         1.20    1.000       neg ## 5  Mycobacterium tuberculosis    800.000         5.00    2.000       neg ## 6            Proteus vulgaris      3.000         0.10    0.100       neg ## 7      Pseudomonas aeruginosa    850.000         2.00    0.400       neg ## 8          Salmonella typhosa      1.000         0.40    0.008       neg ## 9   Salmonella schottmuelleri     10.000         0.80    0.090       neg ## 10         Bacillis anthracis      0.001         0.01    0.007       pos ## 11     Diplococcus pneumoniae      0.005        11.00   10.000       pos ## 12       Staphylococcus albus      0.007         0.10    0.001       pos ## 13      Staphylococcus aureus      0.030         0.03    0.001       pos ## 14      Streptococcus fecalis      1.000         1.00    0.100       pos ## 15  Streptococcus hemolyticus      0.001        14.00   10.000       pos ## 16     Streptococcus viridans      0.005        10.00   40.000       pos lucid(antibiotic) ##                      bacteria penicillin streptomycin neomycin gramstain ## 1        Aerobacter aerogenes    870             1       1.6         neg ## 2            Brucella abortus      1             2       0.02        neg ## 3            Escherichia coli    100             0.4     0.1         neg ## 4       Klebsiella pneumoniae    850             1.2     1           neg ## 5  Mycobacterium tuberculosis    800             5       2           neg ## 6            Proteus vulgaris      3             0.1     0.1         neg ## 7      Pseudomonas aeruginosa    850             2       0.4         neg ## 8          Salmonella typhosa      1             0.4     0.008       neg ## 9   Salmonella schottmuelleri     10             0.8     0.09        neg ## 10         Bacillis anthracis      0.001         0.01    0.007       pos ## 11     Diplococcus pneumoniae      0.005        11      10           pos ## 12       Staphylococcus albus      0.007         0.1     0.001       pos ## 13      Staphylococcus aureus      0.03          0.03    0.001       pos ## 14      Streptococcus fecalis      1             1       0.1         pos ## 15  Streptococcus hemolyticus      0.001        14      10           pos ## 16     Streptococcus viridans      0.005        10      40           pos"},{"path":"http://kwstat.github.io/lucid/articles/lucid_examples.html","id":"example-using-lucid-with-broom","dir":"Articles","previous_headings":"","what":"Example: Using lucid with broom","title":"Lucid printing of floating-point vectors","text":"broom package Robinson (2016) can used collect statistics fitted models tidy data frames. example, using Orange tree data, possible fit separate regression line tree. (straight-line regression entirely sensible, illustrates point.) Extracting information sea numbers difficult. lucid function comes rescue, simply adding one step sequence pipes. formatting, information table almost jumps reader, reducing amount cognitive effort needed interpretation.","code":"require(dplyr) ## Loading required package: dplyr ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union require(broom) ## Loading required package: broom Orange %>% group_by(Tree) %>% do(tidy(lm(circumference ~ age, data=.))) ## # A tibble: 10 × 6 ## # Groups:   Tree [5] ##    Tree  term        estimate std.error statistic   p.value ##    <ord> <chr>          <dbl>     <dbl>     <dbl>     <dbl> ##  1 3     (Intercept)  19.2      5.86         3.28 0.0221    ##  2 3     age           0.0811   0.00563     14.4  0.0000290 ##  3 1     (Intercept)  24.4      6.54         3.73 0.0135    ##  4 1     age           0.0815   0.00628     13.0  0.0000485 ##  5 5     (Intercept)   8.76     8.18         1.07 0.333     ##  6 5     age           0.111    0.00785     14.1  0.0000318 ##  7 2     (Intercept)  20.0      9.35         2.13 0.0859    ##  8 2     age           0.125    0.00898     13.9  0.0000343 ##  9 4     (Intercept)  14.6     11.2          1.30 0.249     ## 10 4     age           0.135    0.0108      12.5  0.0000573 Orange %>% group_by(Tree) %>% do(tidy(lm(circumference ~  age, data=.))) %>% lucid ##    Tree        term estimate std.error statistic   p.value ## 1     3 (Intercept)  19.2      5.86         3.28 0.0221    ## 2     3         age   0.0811   0.00563     14.4  0.000029  ## 3     1 (Intercept)  24.4      6.54         3.73 0.0135    ## 4     1         age   0.0815   0.00628     13    0.0000485 ## 5     5 (Intercept)   8.76     8.18         1.07 0.333     ## 6     5         age   0.111    0.00785     14.1  0.0000318 ## 7     2 (Intercept)  20        9.35         2.13 0.0859    ## 8     2         age   0.125    0.00898     13.9  0.0000343 ## 9     4 (Intercept)  14.6     11.2          1.3  0.249     ## 10    4         age   0.135    0.0108      12.5  0.0000573"},{"path":"http://kwstat.github.io/lucid/articles/lucid_examples.html","id":"example-application-to-mixed-models","dir":"Articles","previous_headings":"","what":"Example: Application to mixed models","title":"Lucid printing of floating-point vectors","text":"process iterative fitting mixed models, often useful compare fits different models data, example using loglikelihood AIC values, help residual plots. can also informative inspect estimated values variance components. end, generic VarCorr() function found nlme Pinheiro et al. (2014) lme4 Bates et al. (2014) packages can used print variance estimates fitted models. VarCorr() function available models obtained using asreml Butler (2009) package. lucid package provides generic function called vc() provides unified interface extracting variance components fitted models obtained asreml, lme4, nlme, rjags packages. vc() function methods specific package make easy extract estimated variances correlations fitted models formats results using lucid() function. Pearce et al. (1988) suggest showing four significant digits error mean square two decimal places digits FF values. lucid() function uses similar philosophy, presenting variances four significant digits asreml ZZ statistics two significant digits.","code":""},{"path":"http://kwstat.github.io/lucid/articles/lucid_examples.html","id":"vc-example-1---rail-data","dir":"Articles","previous_headings":"Example: Application to mixed models","what":"vc() example 1 - Rail data","title":"Lucid printing of floating-point vectors","text":"following simple example illustrates use vc() function identical REML models nlme, lme4, asreml packages. travel times ultrasonic waves six steel rails modeled overall mean, random effect rail, random residual. package rjags used fit similar Bayesian model inspired Wilkinson (2014).","code":""},{"path":"http://kwstat.github.io/lucid/articles/lucid_examples.html","id":"nlme","dir":"Articles","previous_headings":"","what":"nlme","title":"Lucid printing of floating-point vectors","text":"","code":"require(\"nlme\") ## Loading required package: nlme ##  ## Attaching package: 'nlme' ## The following object is masked from 'package:dplyr': ##  ##     collapse data(Rail) mn <- lme(travel~1, random=~1|Rail, data=Rail) vc(mn) ##       effect variance stddev ##  (Intercept)   615.3  24.81  ##     Residual    16.17  4.021"},{"path":"http://kwstat.github.io/lucid/articles/lucid_examples.html","id":"lme4","dir":"Articles","previous_headings":"","what":"lme4","title":"Lucid printing of floating-point vectors","text":"","code":"require(\"lme4\") ## Loading required package: lme4 ## Loading required package: Matrix ##  ## Attaching package: 'lme4' ## The following object is masked from 'package:nlme': ##  ##     lmList m4 <- lmer(travel~1 + (1|Rail), data=Rail) vc(m4) ##       grp        var1 var2   vcov  sdcor ##      Rail (Intercept) <NA> 615.3  24.81  ##  Residual        <NA> <NA>  16.17  4.021"},{"path":"http://kwstat.github.io/lucid/articles/lucid_examples.html","id":"asreml","dir":"Articles","previous_headings":"","what":"asreml","title":"Lucid printing of floating-point vectors","text":"","code":"# require(\"asreml\") # ma <- asreml(travel~1, random=~Rail, data=Rail) # vc(ma) ##         effect component std.error z.ratio constr ##  Rail!Rail.var    615.3      392.6     1.6    pos ##     R!variance     16.17       6.6     2.4    pos"},{"path":"http://kwstat.github.io/lucid/articles/lucid_examples.html","id":"jags","dir":"Articles","previous_headings":"","what":"JAGS","title":"Lucid printing of floating-point vectors","text":"Bayesian model effects can considered random. Compare JAGS point estimates quantiles () results lme4 . lucid() function primarily formatting function uses standard print() functions R, vc() function defines additional class value function dedicated print methods class. done allow additional formatting results.","code":"require(\"nlme\") data(Rail) require(\"rjags\") m5 <- \"model { for(i in 1:nobs){   travel[i] ~ dnorm(mu + theta[Rail[i]], tau) } for(j in 1:6) {   theta[j] ~ dnorm(0, tau.theta) } mu ~ dnorm(50, 0.0001) # Overall mean. dgamma()  tau ~ dgamma(1, .001) tau.theta ~ dgamma(1, .001) residual <- 1/sqrt(tau) sigma.rail <- 1/sqrt(tau.theta) }\" jdat <- list(nobs=nrow(Rail), travel=Rail$travel, Rail=Rail$Rail) jinit <- list(mu=50, tau=1, tau.theta=1) tc5 <- textConnection(m5) j5 <- jags.model(tc5, data=jdat, inits=jinit, n.chains=2, quiet=TRUE) close(tc5) c5 <- coda.samples(j5, c(\"mu\",\"theta\", \"residual\", \"sigma.rail\"),                     n.iter=100000, thin=5, progress.bar=\"none\") m4 ## Linear mixed model fit by REML ['lmerMod'] ## Formula: travel ~ 1 + (1 | Rail) ##    Data: Rail ## REML criterion at convergence: 122.177 ## Random effects: ##  Groups   Name        Std.Dev. ##  Rail     (Intercept) 24.805   ##  Residual              4.021   ## Number of obs: 18, groups:  Rail, 6 ## Fixed Effects: ## (Intercept)   ##        66.5 ranef(m4) ## $Rail ##   (Intercept) ## 2   -34.53091 ## 5   -16.35675 ## 1   -12.39148 ## 6    16.02631 ## 3    18.00894 ## 4    29.24388 ##  ## with conditional variances for \"Rail\""},{"path":"http://kwstat.github.io/lucid/articles/lucid_examples.html","id":"vc-example-2---analysis-of-federer-diagcheck-data","dir":"Articles","previous_headings":"JAGS","what":"vc() example 2 - Analysis of federer.diagcheck data","title":"Lucid printing of floating-point vectors","text":"second, complex example based model Federer Wolfinger (2003) orthogonal polynomials used model trends along rows columns field experiment. data available agridat package (Wright 2014) federer.diagcheck data frame. help page data shows reproduce analysis Federer Wolfinger (2003). using lme4 package reproduce analysis, two different optimizers available. two different optimizers lead similar estimated variances? output , first column identifies terms model, next two columns variance standard deviation ‘bobyqa’ optimizer, final two columns ‘NelderMead’ optimizer. Note, results lme4 version 1.1-7 likely different results recent versions lme4. default output printing shown first. similar variance estimates obtained two optimization methods? difficult compare results due clutter extra digits, quirks way R formats output. variances column 2 shown non-scientific format, variances column 5 shown scientific format. standard deviations shown 5 decimal places column 3 8 decimal places column 6. (numbers stored 15 digits precision.) lucid() function now used show results manner vc() function. formatting variance columns consistent formatting standard deviation columns. Fewer digits shown. easy compare columns see two optimizers giving quite different answers. Note: Bobyqa results almost identical results obtained using ASREML SAS. Note: Data frames quotes, numeric matrices printed quotes. Use noquote() print without quotes, example:","code":"print(out) ##           term     vcov-bo  sdcor-bo sep      vcov-ne     sdcor-ne ## 1  (Intercept)   2869.4469  53.56722     3.228419e+03  56.81917727 ## 2        r1:c3   5531.5724  74.37454     7.688139e+03  87.68203447 ## 3        r1:c2  58225.7678 241.30016     6.974755e+04 264.09761622 ## 4        r1:c1 128004.1561 357.77668     1.074270e+05 327.76064925 ## 5           c8   6455.7495  80.34768     6.787004e+03  82.38327224 ## 6           c6   1399.7294  37.41296     1.636128e+03  40.44907560 ## 7           c4   1791.6507  42.32790     1.226846e+04 110.76308194 ## 8           c3   2548.8847  50.48648     2.686302e+03  51.82954364 ## 9           c2   5941.7908  77.08301     7.644730e+03  87.43414634 ## 10          c1      0.0000   0.00000     1.225143e-03   0.03500204 ## 11         r10   1132.9501  33.65932     1.975505e+03  44.44665149 ## 12          r8   1355.2291  36.81344     1.241429e+03  35.23391157 ## 13          r4   2268.7296  47.63118     2.811241e+03  53.02113582 ## 14          r2    241.7894  15.54958     9.282275e+02  30.46682578 ## 15          r1   9199.9022  95.91612     1.036358e+04 101.80169429 ## 16        <NA>   4412.1096  66.42371     4.126832e+03  64.24042100 lucid(out, dig=4) ##           term  vcov-bo sdcor-bo sep  vcov-ne sdcor-ne ## 1  (Intercept)   2869      53.57       3228     56.82  ## 2        r1:c3   5532      74.37       7688     87.68  ## 3        r1:c2  58230     241.3       69750    264.1   ## 4        r1:c1 128000     357.8      107400    327.8   ## 5           c8   6456      80.35       6787     82.38  ## 6           c6   1400      37.41       1636     40.45  ## 7           c4   1792      42.33      12270    110.8   ## 8           c3   2549      50.49       2686     51.83  ## 9           c2   5942      77.08       7645     87.43  ## 10          c1      0       0             0      0.035 ## 11         r10   1133      33.66       1976     44.45  ## 12          r8   1355      36.81       1241     35.23  ## 13          r4   2269      47.63       2811     53.02  ## 14          r2    241.8    15.55        928.2   30.47  ## 15          r1   9200      95.92      10360    101.8   ## 16        <NA>   4412      66.42       4127     64.24 noquote(lucid(as.matrix(head(mtcars)),2)) ##                   mpg cyl disp hp  drat wt  qsec vs am gear carb ## Mazda RX4         21  6   160  110 3.9  2.6 16   0  1  4    4    ## Mazda RX4 Wag     21  6   160  110 3.9  2.9 17   0  1  4    4    ## Datsun 710        23  4   110   93 3.8  2.3 19   1  1  4    1    ## Hornet 4 Drive    21  6   260  110 3.1  3.2 19   1  0  3    1    ## Hornet Sportabout 19  8   360  180 3.2  3.4 17   0  0  3    2    ## Valiant           18  6   220  100 2.8  3.5 20   1  0  3    1"},{"path":[]},{"path":"http://kwstat.github.io/lucid/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kevin Wright. Author, maintainer, copyright holder.","code":""},{"path":"http://kwstat.github.io/lucid/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wright K (2024). lucid: Printing Floating Point Numbers Human-Friendly Format. R package version 1.8, http://kwstat.github.io/lucid/, https://kwstat.github.io/lucid/.","code":"@Manual{,   title = {lucid: Printing Floating Point Numbers in a Human-Friendly Format},   author = {Kevin Wright},   year = {2024},   note = {R package version 1.8, http://kwstat.github.io/lucid/},   url = {https://kwstat.github.io/lucid/}, }"},{"path":"http://kwstat.github.io/lucid/index.html","id":"lucid-","dir":"","previous_headings":"","what":"Printing Floating Point Numbers in a Human-Friendly Format","title":"Printing Floating Point Numbers in a Human-Friendly Format","text":"Homepage: https://kwstat.github.io/lucid Repository: https://github.com/kwstat/lucid ‘lucid’ package provides simple function improve format floating-point numbers humans. ‘lucid()’ function primarily formatting function similar ‘round’ ‘signif’, output always character. Note: lucid package created tibble package. tibble package now uses similar style formatting dataframes.","code":""},{"path":"http://kwstat.github.io/lucid/index.html","id":"key-features","dir":"","previous_headings":"","what":"Key features","title":"Printing Floating Point Numbers in a Human-Friendly Format","text":"Simple use. Makes floating-point numbers easier read.","code":""},{"path":"http://kwstat.github.io/lucid/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Printing Floating Point Numbers in a Human-Friendly Format","text":"","code":"# Install the released version from CRAN: install.packages(\"lucid\")  # Install the development version from GitHub: install.packages(\"devtools\") devtools::install_github(\"kwstat/lucid\")"},{"path":"http://kwstat.github.io/lucid/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Printing Floating Point Numbers in a Human-Friendly Format","text":"short example , separate regression line fit five trees’ circumference versus age. default output difficult interpret quickly. lucid function makes results much cleaner reducing visual clutter aligning decimals.","code":"require(lucid) require(dplyr) require(broom)  # Fit a separate regression line to each tree. # Use `as.data.frame` to remove formatting done by `tibble`. Orange %>% group_by(Tree) %>% do(tidy(lm(circumference ~ age, data=.))) %>% as.data.frame  Source: local data frame [10 x 6] Groups: Tree [5]      Tree        term    estimate    std.error statistic      p.value    <ord>       <chr>       <dbl>        <dbl>     <dbl>        <dbl> 1      3 (Intercept) 19.20353638  5.863410215  3.275148 2.207255e-02 2      3         age  0.08111158  0.005628105 14.411881 2.901046e-05 3      1 (Intercept) 24.43784664  6.543311039  3.734783 1.350409e-02 4      1         age  0.08147716  0.006280721 12.972581 4.851902e-05 5      5 (Intercept)  8.75834459  8.176436207  1.071169 3.330518e-01 6      5         age  0.11102891  0.007848307 14.146861 3.177093e-05 7      2 (Intercept) 19.96090337  9.352361105  2.134317 8.593318e-02 8      2         age  0.12506176  0.008977041 13.931291 3.425041e-05 9      4 (Intercept) 14.63762022 11.233762751  1.303002 2.493507e-01 10     4         age  0.13517222  0.010782940 12.535748 5.733090e-05  # Now extend the pipe to include 'lucid' Orange %>% group_by(Tree) %>% do(tidy(lm(circumference ~ age, data=.))) %>% as.data.frame %>% lucid  # Note: `tibble` now uses formatting almost identical to `lucid` # Orange %>% group_by(Tree) %>% do(tidy(lm(circumference ~ age, data=.)))  Source: local data frame [10 x 6] Groups: Tree [5]      Tree        term estimate std.error statistic   p.value    <ord>       <chr>    <chr>     <chr>     <chr>     <chr> 1      3 (Intercept)  19.2      5.86         3.28 0.0221 2      3         age   0.0811   0.00563     14.4  0.0000290 3      1 (Intercept)  24.4      6.54         3.73 0.0135 4      1         age   0.0815   0.00628     13    0.0000485 5      5 (Intercept)   8.76     8.18         1.07 0.333 6      5         age   0.111    0.00785     14.1  0.0000318 7      2 (Intercept)  20        9.35         2.13 0.0859 8      2         age   0.125    0.00898     13.9  0.0000343 9      4 (Intercept)  14.6     11.2          1.3  0.249 10     4         age   0.135    0.0108      12.5  0.0000573"},{"path":"http://kwstat.github.io/lucid/reference/antibiotic.html","id":null,"dir":"Reference","previous_headings":"","what":"Effectiveness of 3 antibiotics against 16 bacterial species. — antibiotic","title":"Effectiveness of 3 antibiotics against 16 bacterial species. — antibiotic","text":"Effectiveness 3 antibiotics 16 bacterial species.","code":""},{"path":"http://kwstat.github.io/lucid/reference/antibiotic.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Effectiveness of 3 antibiotics against 16 bacterial species. — antibiotic","text":"data frame 16 observations following 5 variables. bacteria bacterial species, 16 levels penicillin MIC penicillin streptomycin MIC streptomycin neomycin MIC neomycin gramstain Gram staining (positive negative)","code":""},{"path":"http://kwstat.github.io/lucid/reference/antibiotic.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Effectiveness of 3 antibiotics against 16 bacterial species. — antibiotic","text":"Burtin (1951). Scope.  Fall, 1951.","code":""},{"path":"http://kwstat.github.io/lucid/reference/antibiotic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Effectiveness of 3 antibiotics against 16 bacterial species. — antibiotic","text":"values reported minimum inhibitory concentration (MIC) micrograms/milliliter, represents concentration antibiotic required prevent growth vitro.","code":""},{"path":"http://kwstat.github.io/lucid/reference/antibiotic.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Effectiveness of 3 antibiotics against 16 bacterial species. — antibiotic","text":"Wainer, H. (2009). Centenary Celebration Burtin: Pioneer Scientific Visualization.  Chance, 22(1), 51-55. https://chance.amstat.org/2009/02/visrev221/ Wainer, H. (2009). Visual Revelations: Pictures Exhibition. Chance, 22(2), 46–54. https://chance.amstat.org/2009/04/visrev222/ Wainer, H. (2014). Medical Illuminations: Using Evidence, Visualization Statistical Thinking Improve Healthcare.","code":""},{"path":"http://kwstat.github.io/lucid/reference/antibiotic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Effectiveness of 3 antibiotics against 16 bacterial species. — antibiotic","text":"","code":"data(antibiotic) lucid(antibiotic) #>                      bacteria penicillin streptomycin neomycin gramstain #> 1        Aerobacter aerogenes    870             1       1.6         neg #> 2            Brucella abortus      1             2       0.02        neg #> 3            Escherichia coli    100             0.4     0.1         neg #> 4       Klebsiella pneumoniae    850             1.2     1           neg #> 5  Mycobacterium tuberculosis    800             5       2           neg #> 6            Proteus vulgaris      3             0.1     0.1         neg #> 7      Pseudomonas aeruginosa    850             2       0.4         neg #> 8          Salmonella typhosa      1             0.4     0.008       neg #> 9   Salmonella schottmuelleri     10             0.8     0.09        neg #> 10         Bacillis anthracis      0.001         0.01    0.007       pos #> 11     Diplococcus pneumoniae      0.005        11      10           pos #> 12       Staphylococcus albus      0.007         0.1     0.001       pos #> 13      Staphylococcus aureus      0.03          0.03    0.001       pos #> 14      Streptococcus fecalis      1             1       0.1         pos #> 15  Streptococcus hemolyticus      0.001        14      10           pos #> 16     Streptococcus viridans      0.005        10      40           pos  if (FALSE) { # \\dontrun{ # Plot the data similar to Fig 2.14 of Wainer's book, \"Medical Illuminations\"  require(lattice) require(reshape2)  # Use log10 transform dat <- transform(antibiotic,                  penicillin=log10(penicillin),                  streptomycin=log10(streptomycin),                  neomycin=log10(neomycin)) dat <- transform(dat, sgn = ifelse(dat$gramstain==\"neg\", \"-\", \"+\")) dat <- transform(dat,                  bacteria = paste(bacteria, sgn)) dat <- transform(dat, bacteria=reorder(bacteria, -penicillin))  dat <- melt(dat)  op <- tpg <- trellis.par.get() tpg$superpose.symbol$pch <- toupper(substring(levels(dat$variable),1,1)) tpg$superpose.symbol$col <- c(\"darkgreen\",\"purple\",\"orange\") trellis.par.set(tpg) dotplot(bacteria ~ value, data=dat, group=variable,         cex=2,         scales=list(x=list(at= -3:3,                       labels=c('.001', '.01', '.1', '1', '10', '100', '1000'))),         main=\"Bacterial response to Neomycin, Streptomycin, and Penicillin\",         xlab=\"Minimum Inhibitory Concentration (mg/L)\")  trellis.par.set(op)  } # }"},{"path":"http://kwstat.github.io/lucid/reference/lucid.html","id":null,"dir":"Reference","previous_headings":"","what":"Lucid printing — lucid","title":"Lucid printing — lucid","text":"Format column numbers way make easy understand.","code":""},{"path":"http://kwstat.github.io/lucid/reference/lucid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lucid printing — lucid","text":"","code":"lucid(x, dig = 3, na.value = NULL, ...)  # Default S3 method lucid(x, dig = 3, na.value = NULL, ...)  # S3 method for class 'numeric' lucid(x, dig = 3, na.value = NULL, ...)  # S3 method for class 'data.frame' lucid(x, dig = 3, na.value = NULL, ...)  # S3 method for class 'matrix' lucid(x, dig = 3, na.value = NULL, ...)  # S3 method for class 'list' lucid(x, dig = 3, na.value = NULL, ...)  # S3 method for class 'tbl_df' lucid(x, dig = 3, na.value = NULL, ...)"},{"path":"http://kwstat.github.io/lucid/reference/lucid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lucid printing — lucid","text":"x Object format. dig Number significant digits use printing. na.value Character string use instead 'NA' numeric missing values. Default NULL, nothing. ... Additional arguments passed data.frame method.","code":""},{"path":"http://kwstat.github.io/lucid/reference/lucid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lucid printing — lucid","text":"Text, formatted human-readable way.  Standard R methods used print value.","code":""},{"path":"http://kwstat.github.io/lucid/reference/lucid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lucid printing — lucid","text":"Output R often scientific notation, makes difficult quickly glance numbers gain understanding relative values. function formats numbers way makes interpretation numbers _immediately_ apparent. sequence steps formatting output : (1) zap zero (2) use significant digits (3) drop trailing zeros decimal (4) align decimals.","code":""},{"path":[]},{"path":"http://kwstat.github.io/lucid/reference/lucid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lucid printing — lucid","text":"","code":"x0 <- c(123, 12.3, 1.23, .123456) # From Finney, page 352 print(x0) #> [1] 123.000000  12.300000   1.230000   0.123456 lucid(x0, dig=2) #> [1] \"120   \" \" 12   \" \"  1.2 \" \"  0.12\"  x1 <- c(123, NA, 1.23, NA) lucid(x1, na.value=\"--\") #> [1] \"123   \" \"    --\" \"  1.23\" \"    --\"  signif(mtcars[15:20,]) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 lucid(mtcars[15:20,]) #>                      mpg cyl  disp  hp drat   wt qsec vs am gear carb #> Cadillac Fleetwood  10.4   8 472   205 2.93 5.25 18    0  0    3    4 #> Lincoln Continental 10.4   8 460   215 3    5.42 17.8  0  0    3    4 #> Chrysler Imperial   14.7   8 440   230 3.23 5.34 17.4  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.2  19.5  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.62 18.5  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.84 19.9  1  1    4    1  x2 <- c(1/3, 5/3, 1, 1.5, 2, 11/6, 5/6, 8.43215652105343e-17) print(x2) #> [1] 3.333333e-01 1.666667e+00 1.000000e+00 1.500000e+00 2.000000e+00 #> [6] 1.833333e+00 8.333333e-01 8.432157e-17 lucid(x2) #> [1] \"0.333\" \"1.67 \" \"1    \" \"1.5  \" \"2    \" \"1.83 \" \"0.833\" \"0    \"  # Which coef is 0 ? How large is the intercept? df1 <- data.frame(effect=c(-13.5, 4.5,  24.5, 6.927792e-14, -1.75,                     16.5, 113.5000)) rownames(df1) <- c(\"A\",\"B\",\"C\",\"C1\",\"C2\",\"D\",\"(Intercept)\") print(df1) #>                    effect #> A           -1.350000e+01 #> B            4.500000e+00 #> C            2.450000e+01 #> C1           6.927792e-14 #> C2          -1.750000e+00 #> D            1.650000e+01 #> (Intercept)  1.135000e+02 lucid(df1) #>             effect #> A           -13.5  #> B             4.5  #> C            24.5  #> C1            0    #> C2           -1.75 #> D            16.5  #> (Intercept) 114     df2 <- data.frame(effect=c(\"hyb\",\"region\",\"region:loc\",\"hyb:region\",                            \"yr\",\"hyb:yr\",\"region:yr\",\"R!variance\"),                   component=c(10.9,277,493,1.30E-04,126,22.3,481,268),                   std.error=c(4.40,166,26.1,1.58E-06,119,4.50,108,3.25),                   z.ratio=c(2.471,1.669,18.899,82.242,                   1.060,4.951,4.442,82.242),                   constraint=c(\"pos\",\"pos\",\"pos\",\"bnd\",                   \"pos\",\"pos\",\"pos\",\"pos\")) print(df2) #>       effect component std.error z.ratio constraint #> 1        hyb  1.09e+01  4.40e+00   2.471        pos #> 2     region  2.77e+02  1.66e+02   1.669        pos #> 3 region:loc  4.93e+02  2.61e+01  18.899        pos #> 4 hyb:region  1.30e-04  1.58e-06  82.242        bnd #> 5         yr  1.26e+02  1.19e+02   1.060        pos #> 6     hyb:yr  2.23e+01  4.50e+00   4.951        pos #> 7  region:yr  4.81e+02  1.08e+02   4.442        pos #> 8 R!variance  2.68e+02  3.25e+00  82.242        pos lucid(df2) #>       effect component std.error z.ratio constraint #> 1        hyb   10.9         4.4     2.47        pos #> 2     region  277         166       1.67        pos #> 3 region:loc  493          26.1    18.9         pos #> 4 hyb:region    0.0001      0      82.2         bnd #> 5         yr  126         119       1.06        pos #> 6     hyb:yr   22.3         4.5     4.95        pos #> 7  region:yr  481         108       4.44        pos #> 8 R!variance  268           3.25   82.2         pos"},{"path":"http://kwstat.github.io/lucid/reference/vc.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract variance components from mixed models — vc","title":"Extract variance components from mixed models — vc","text":"Extract variance components fitted model.  Currently supports asreml, lme4, mmer, nlme mcmc.list objects.","code":""},{"path":"http://kwstat.github.io/lucid/reference/vc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract variance components from mixed models — vc","text":"","code":"vc(object, ...)  # Default S3 method vc(object, ...)  # S3 method for class 'asreml' vc(object, gamma = FALSE, ...)  # S3 method for class 'lme' vc(object, ...)  # S3 method for class 'glmerMod' vc(object, ...)  # S3 method for class 'lmerMod' vc(object, ...)  # S3 method for class 'mcmc.list' vc(object, quantiles = c(0.025, 0.5, 0.975), ...)  # S3 method for class 'mmer' vc(object, ...)"},{"path":"http://kwstat.github.io/lucid/reference/vc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract variance components from mixed models — vc","text":"object fitted model object ... used. Extra arguments. gamma gamma=FALSE, 'gamma' column omitted results asreml quantiles quantiles use printing mcmc.list objects","code":""},{"path":"http://kwstat.github.io/lucid/reference/vc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract variance components from mixed models — vc","text":"data frame object.","code":""},{"path":"http://kwstat.github.io/lucid/reference/vc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract variance components from mixed models — vc","text":"extracted variance components stored data frame additional 'vc.xxx' class associated print method.","code":""},{"path":"http://kwstat.github.io/lucid/reference/vc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract variance components from mixed models — vc","text":"","code":"if (FALSE) { # \\dontrun{  require(\"nlme\") data(Rail) m3 <- lme(travel~1, random=~1|Rail, data=Rail) vc(m3) ##       effect variance stddev ##  (Intercept)   615.3  24.81 ##     Residual    16.17  4.021  require(\"lme4\") m4 <- lmer(travel~1 + (1|Rail), data=Rail) vc(m4) ##      grp        var1 var2   vcov  sdcor ##     Rail (Intercept) <NA> 615.3  24.81 ## Residual        <NA> <NA>  16.17  4.021   require(\"asreml\") ma <- asreml(travel~1, random=~Rail, data=Rail) vc(ma) ##         effect component std.error z.ratio constr ##  Rail!Rail.var    615.3      392.6     1.6    pos ##     R!variance     16.17       6.6     2.4    pos  # See vignette for rjags example  # To change the number of digits, use the print function. print(vc(m3), dig=5)  } # }"},{"path":"http://kwstat.github.io/lucid/news/index.html","id":"lucid-19-unpublished","dir":"Changelog","previous_headings":"","what":"lucid 1.9 unpublished","title":"lucid 1.9 unpublished","text":"Switch MIT license. todo. matrix printed quotes, tibble . tibbles printing 6 rows. Maybe “pillar” package help? .matrix(mtcars) %>% lucid .matrix(mtcars) %>% as_tibble","code":""},{"path":"http://kwstat.github.io/lucid/news/index.html","id":"lucid-18-2021-04-01","dir":"Changelog","previous_headings":"","what":"lucid 1.8 (2021-04-01)","title":"lucid 1.8 (2021-04-01)","text":"CRAN release: 2021-04-16 Add method sommer::mmer objects.","code":""},{"path":"http://kwstat.github.io/lucid/news/index.html","id":"lucid-17-2019-02-06","dir":"Changelog","previous_headings":"","what":"lucid 1.7 (2019-02-06)","title":"lucid 1.7 (2019-02-06)","text":"CRAN release: 2019-02-06 Fix test case accommodate changes lme4 output.","code":""},{"path":"http://kwstat.github.io/lucid/news/index.html","id":"lucid-16-2018-08-24","dir":"Changelog","previous_headings":"","what":"lucid 1.6 (2018-08-24)","title":"lucid 1.6 (2018-08-24)","text":"CRAN release: 2018-08-24 lucid() now converts tibbles data.frames formatting.","code":""},{"path":"http://kwstat.github.io/lucid/news/index.html","id":"lucid-14-2016-10-25","dir":"Changelog","previous_headings":"","what":"lucid 1.4 (2016-10-25)","title":"lucid 1.4 (2016-10-25)","text":"CRAN release: 2016-10-25 Added logo, JSM poster & paper github. Changed vignette Rnw Rmd. Switched roxygen2 documentation. Now using testthat covr packages.","code":""},{"path":"http://kwstat.github.io/lucid/news/index.html","id":"lucid-13-2015-07-03","dir":"Changelog","previous_headings":"","what":"lucid 1.3 (2015-07-03)","title":"lucid 1.3 (2015-07-03)","text":"CRAN release: 2015-07-03 Namespace changes due R devel changes.","code":""},{"path":"http://kwstat.github.io/lucid/news/index.html","id":"lucid-12-2015-04-14","dir":"Changelog","previous_headings":"","what":"lucid 1.2 (2015-04-14)","title":"lucid 1.2 (2015-04-14)","text":"CRAN release: 2015-04-14 Added vc.mcmc.list() prettier summaries JAGS.","code":""},{"path":"http://kwstat.github.io/lucid/news/index.html","id":"lucid-11-2015-02-11","dir":"Changelog","previous_headings":"","what":"lucid 1.1 (2015-02-11)","title":"lucid 1.1 (2015-02-11)","text":"CRAN release: 2015-02-11 Re-worked code. Primary objective formatting, printing. Added na.replace option.","code":""},{"path":"http://kwstat.github.io/lucid/news/index.html","id":"lucid-10-2014-11-26","dir":"Changelog","previous_headings":"","what":"lucid 1.0 (2014-11-26)","title":"lucid 1.0 (2014-11-26)","text":"CRAN release: 2014-11-26 First release CRAN, Nov 2014.","code":""},{"path":"http://kwstat.github.io/lucid/news/index.html","id":"lucid-00-2010-03-01","dir":"Changelog","previous_headings":"","what":"lucid 0.0 (2010-03-01)","title":"lucid 0.0 (2010-03-01)","text":"Development begins","code":""}]
